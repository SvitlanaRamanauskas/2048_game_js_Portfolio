{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar rows = 4;\nvar columns = 4;\nvar score = 0;\nvar field;\nvar page = document.querySelector(\".container\");\nvar startButton = document.getElementById(\"start\");\nvar gameStarted = false;\nvar gameOver = false;\nvar moved = false;\nstartButton.addEventListener(\"click\", function() {\n    if (startButton.classList.contains(\"start\")) {\n        startButton.classList.remove(\"start\");\n        startButton.classList.add(\"restart\");\n        startButton.innerText = \"Restart\";\n        if (!gameStarted) {\n            var messageStart = page.querySelector(\".message-start\");\n            messageStart.classList.add(\"hidden\");\n            gameStarted = true;\n            gameOver = false;\n            setGame();\n        }\n    } else if (startButton.classList.contains(\"restart\")) {\n        clearGame();\n        startButton.innerText = \"Restart\";\n        var messageLose = page.querySelector(\".message-lose\");\n        messageLose.classList.add(\"hidden\");\n        gameStarted = true;\n        gameOver = false;\n        setGame();\n    }\n});\nfunction clearGame() {\n    startButton.innerText = \"Start\";\n    score = 0;\n    document.getElementById(\"score\").innerText = score;\n    field = new Array(rows).fill(0).map(function() {\n        return new Array(columns).fill(0);\n    });\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        var cell = document.getElementById(r.toString() + \"-\" + c.toString());\n        updateCell(cell, 0);\n    }\n}\nfunction setGame() {\n    field = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    var fieldContainer = document.getElementById(\"field\");\n    fieldContainer.innerHTML = \"\";\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        var cell = document.createElement(\"div\");\n        cell.id = r.toString() + \"-\" + c.toString();\n        var num = field[r][c];\n        updateCell(cell, num);\n        document.getElementById(\"field\").append(cell);\n    }\n    setTwo();\n    setTwo();\n}\nfunction updateCell(cell, num) {\n    cell.innerText = \"\";\n    cell.classList.value = \"\";\n    cell.classList.add(\"field-cell\");\n    if (num > 0) {\n        cell.innerText = num.toString();\n        if (num <= 2048) {\n            cell.classList.add(\"field-cell--\" + num.toString());\n            if (num === 2048) messageWin();\n        }\n    }\n}\ndocument.addEventListener(\"keyup\", function(element) {\n    if (!hasEmptyCell() && !hasPossibleMoves()) {\n        gameOver = true;\n        messageGameOver();\n        return;\n    }\n    switch(element.code){\n        case \"ArrowLeft\":\n            moveLeft();\n            setTwo();\n            break;\n        case \"ArrowRight\":\n            moveRight();\n            setTwo();\n            break;\n        case \"ArrowUp\":\n            moveUp();\n            setTwo();\n            break;\n        case \"ArrowDown\":\n            moveDown();\n            setTwo();\n            break;\n    }\n    document.getElementById(\"score\").innerText = score;\n});\nfunction filterZero(row) {\n    return row.filter(function(num) {\n        return num !== 0;\n    });\n}\nfunction move(row) {\n    var filteredRow = filterZero(row);\n    for(var ind = 0; ind < filteredRow.length - 1; ind++)if (filteredRow[ind] === filteredRow[ind + 1]) {\n        filteredRow[ind] *= 2;\n        filteredRow[ind + 1] = 0;\n        score += filteredRow[ind];\n    }\n    filteredRow = filterZero(filteredRow);\n    while(filteredRow.length < columns)filteredRow.push(0);\n    return filteredRow;\n}\nfunction moveLeft() {\n    for(var r = 0; r < rows; r++){\n        var row = field[r];\n        row = move(row);\n        field[r] = row;\n        for(var c = 0; c < columns; c++){\n            var cell = document.getElementById(r.toString() + \"-\" + c.toString());\n            var num = field[r][c];\n            updateCell(cell, num);\n        }\n    }\n}\nfunction moveRight() {\n    for(var r = 0; r < rows; r++){\n        var row = field[r];\n        row.reverse();\n        row = move(row);\n        field[r] = row.reverse();\n        for(var c = 0; c < columns; c++){\n            var cell = document.getElementById(r.toString() + \"-\" + c.toString());\n            var num = field[r][c];\n            updateCell(cell, num);\n        }\n    }\n}\nfunction moveUp() {\n    for(var c = 0; c < columns; c++){\n        var row = [\n            field[0][c],\n            field[1][c],\n            field[2][c],\n            field[3][c]\n        ];\n        row = move(row);\n        for(var r = 0; r < rows; r++){\n            field[r][c] = row[r];\n            var cell = document.getElementById(r.toString() + \"-\" + c.toString());\n            var num = field[r][c];\n            updateCell(cell, num);\n        }\n    }\n}\nfunction moveDown() {\n    for(var c = 0; c < columns; c++){\n        var row = [\n            field[0][c],\n            field[1][c],\n            field[2][c],\n            field[3][c]\n        ];\n        row.reverse();\n        row = move(row);\n        row.reverse();\n        for(var r = 0; r < rows; r++){\n            field[r][c] = row[r];\n            var cell = document.getElementById(r.toString() + \"-\" + c.toString());\n            var num = field[r][c];\n            updateCell(cell, num);\n        }\n    }\n}\nfunction setTwo() {\n    if (!hasEmptyCell()) return;\n    var found = false;\n    var value = Math.random() < 0.9 ? 2 : 4;\n    while(!found){\n        var r = Math.floor(Math.random() * rows);\n        var c = Math.floor(Math.random() * columns);\n        if (field[r][c] === 0) {\n            field[r][c] = value;\n            var cell = document.getElementById(r.toString() + \"-\" + c.toString());\n            cell.innerText = value.toString();\n            cell.classList.add(\"field-cell--\" + value);\n            found = true;\n        }\n    }\n}\nfunction hasEmptyCell() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        if (field[r][c] === 0) return true;\n    }\n    return false;\n}\nfunction hasPossibleMoves() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        if (r > 0 && field[r][c] === field[r - 1][c]) return true;\n        if (r < rows - 1 && field[r][c] === field[r + 1][c]) return true;\n        if (c > 0 && field[r][c] === field[r][c - 1]) return true;\n        if (c < columns - 1 && field[r][c] === field[r][c + 1]) return true;\n    }\n    return false;\n}\nfunction messageGameOver() {\n    var messageLose = page.querySelector(\".message-lose\");\n    messageLose.classList.remove(\"hidden\");\n}\nfunction messageWin() {\n    var winningMessage = page.querySelector(\".message-win\");\n    winningMessage.classList.remove(\"hidden\");\n}\n\n//# sourceMappingURL=index.b3bc52a6.js.map\n","'use strict';\n\nconst rows = 4;\nconst columns = 4;\nlet score = 0;\nlet field;\nconst page = document.querySelector('.container');\nconst startButton = document.getElementById('start');\nlet gameStarted = false;\nlet gameOver = false;\nlet moved = false;\n\nstartButton.addEventListener('click', function() {\n  if (startButton.classList.contains('start')) {\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.innerText = 'Restart';\n\n    if (!gameStarted) {\n      const messageStart = page.querySelector('.message-start');\n\n      messageStart.classList.add('hidden');\n      gameStarted = true;\n      gameOver = false;\n      setGame();\n    }\n  } else if (startButton.classList.contains('restart')) {\n    clearGame();\n    startButton.innerText = 'Restart';\n\n    const messageLose = page.querySelector('.message-lose');\n\n    messageLose.classList.add('hidden');\n    gameStarted = true;\n    gameOver = false;\n    setGame();\n  }\n});\n\nfunction clearGame() {\n  startButton.innerText = 'Start';\n  score = 0;\n  document.getElementById('score').innerText = score;\n\n  field = new Array(rows).fill(0).map(() => new Array(columns).fill(0));\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const cell = document.getElementById(r.toString() + '-' + c.toString());\n\n      updateCell(cell, 0);\n    }\n  }\n}\n\nfunction setGame() {\n  field = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  const fieldContainer = document.getElementById('field');\n\n  fieldContainer.innerHTML = '';\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const cell = document.createElement('div');\n\n      cell.id = r.toString() + '-' + c.toString();\n\n      const num = field[r][c];\n\n      updateCell(cell, num);\n      document.getElementById('field').append(cell);\n    }\n  }\n  setTwo();\n  setTwo();\n}\n\nfunction updateCell(cell, num) {\n  cell.innerText = '';\n  cell.classList.value = '';\n  cell.classList.add('field-cell');\n\n  if (num > 0) {\n    cell.innerText = num.toString();\n\n    if (num <= 2048) {\n      cell.classList.add('field-cell--' + num.toString());\n\n      if (num === 2048) {\n        messageWin();\n      }\n    }\n  }\n}\n\ndocument.addEventListener('keyup', (element) => {\n  if (!hasEmptyCell() && !hasPossibleMoves()) {\n    gameOver = true;\n    messageGameOver();\n    return\n  }\n\n  switch (element.code) {\n    case 'ArrowLeft':\n      moveLeft();\n      setTwo();\n      break;\n    case 'ArrowRight':\n      moveRight();\n      setTwo();\n      break;\n    case 'ArrowUp':\n      moveUp();\n      setTwo();\n      break;\n    case 'ArrowDown':\n      moveDown();\n      setTwo();\n      break;\n  }\n\n  document.getElementById('score').innerText = score;\n});\n\nfunction filterZero(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction move(row) {\n  let filteredRow = filterZero(row);\n\n  for (let ind = 0; ind < filteredRow.length - 1; ind++) {\n    if (filteredRow[ind] === filteredRow[ind + 1]) {\n      filteredRow[ind] *= 2;\n      filteredRow[ind + 1] = 0;\n      score += filteredRow[ind];\n    }\n  }\n\n  filteredRow = filterZero(filteredRow);\n\n  while (filteredRow.length < columns) {\n    filteredRow.push(0);\n  }\n\n  return filteredRow;\n}\n\nfunction moveLeft() {\n\n  for (let r = 0; r < rows; r++) {\n    let row = field[r];\n    row = move(row);\n\n    field[r] = row;\n    for (let c = 0; c < columns; c++) {\n      const cell = document.getElementById(r.toString() + '-' + c.toString());\n      const num = field[r][c];\n\n      updateCell(cell, num);\n    }\n  }\n}\n\nfunction moveRight() {\n  for (let r = 0; r < rows; r++) {\n    let row = field[r];\n\n    row.reverse();\n    row = move(row);\n\n    field[r] = row.reverse();\n\n    for (let c = 0; c < columns; c++) {\n      const cell = document.getElementById(r.toString() + '-' + c.toString());\n      const num = field[r][c];\n\n      updateCell(cell, num);\n    }\n  }\n}\n\nfunction moveUp() {\n  for (let c = 0; c < columns; c++) {\n    let row = [field[0][c], field[1][c], field[2][c], field[3][c]];\n    row = move(row);\n\n    for (let r = 0; r < rows; r++) {\n      field[r][c] = row[r];\n\n      const cell = document.getElementById(r.toString() + '-' + c.toString());\n      const num = field[r][c];\n\n      updateCell(cell, num);\n    }\n  }\n}\n\nfunction moveDown() {\n  for (let c = 0; c < columns; c++) {\n    let row = [field[0][c], field[1][c], field[2][c], field[3][c]];\n\n    row.reverse();\n\n    row = move(row);\n\n    row.reverse();\n\n    for (let r = 0; r < rows; r++) {\n      field[r][c] = row[r];\n\n      const cell = document.getElementById(r.toString() + '-' + c.toString());\n      const num = field[r][c];\n\n      updateCell(cell, num);\n    }\n  }\n}\n\nfunction setTwo() {\n  if(!hasEmptyCell()) {\n    return;\n  }\n\n  let found = false;\n\n  const value = Math.random() < 0.9 ? 2 : 4;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (field[r][c] === 0) {\n      field[r][c] = value;\n\n      const cell = document.getElementById(r.toString() + '-' + c.toString());\n\n      cell.innerText = value.toString();\n      cell.classList.add('field-cell--' + value);\n      found = true;\n    }\n  }\n}\n\nfunction hasEmptyCell() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (field[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction hasPossibleMoves() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (r > 0 && field[r][c] === field[r - 1][c]) return true;\n      if (r < rows - 1 && field[r][c] === field[r + 1][c]) return true;\n      if (c > 0 && field[r][c] === field[r][c - 1]) return true;\n      if (c < columns - 1 && field[r][c] === field[r][c + 1]) return true;\n    }\n  }\n\n  return false;\n}\n\nfunction messageGameOver() {\n  const messageLose = page.querySelector('.message-lose');\n\n  messageLose.classList.remove('hidden');\n}\n\nfunction messageWin() {\n  const winningMessage = page.querySelector('.message-win');\n\n  winningMessage.classList.remove('hidden');\n}\n\n"],"names":["field","score","page","document","querySelector","startButton","getElementById","gameStarted","setGame","fieldContainer","innerHTML","r","c","cell","createElement","id","toString","updateCell","append","setTwo","num","innerText","classList","value","add","winningMessage","remove","filterZero","row","filter","move","filteredRow","ind","length","push","hasEmptyCell","found","Math","random","floor","addEventListener","contains","messageStart","clearGame","fill","map","messageLose","element","hasPossibleMoves","rows","columns","code","moveLeft","moveRight","reverse","moveUp","moveDown"],"version":3,"file":"index.b3bc52a6.js.map"}